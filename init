#!/bin/bash
set -eu

script_dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
project_skeletons="$(find "$script_dir" -mindepth 1 -maxdepth 1 -type d -not \( -name common -or -name .git -or -name test \) -exec basename '{}' \;)"

function in_list {
  for x in $1; do
    [[ "$x" == "$2" ]] && return 0
  done
  return 1
}

function list_available_project_skeletons {
  echo "Available project skeletons:" >&2
  (
    cd "$script_dir"
    for s in *; do
      if [[ -d "$s" && "$s" != 'core' && "$s" != 'doc' ]]; then
        echo "  - $s: $(cat "$script_dir/$s/.description")"
      fi
    done
  )
}

if [[ $# -eq 0 ]]; then
  echo "Usage: $0 PROJECT_SKELETON [DIR [NAME]]" >&2
  echo >&2
  echo "DIR defaults to the current directory. NAME defaults to DIR's name." >&2
  echo >&2
  list_available_project_skeletons
  exit 1
fi

project_skeleton="$1"

if ! in_list "$project_skeletons" "$project_skeleton"; then
  echo "Invalid project skeleton: $project_skeleton" >&2
  echo >&2
  list_available_project_skeletons
  exit 1
fi

project_dir="${2:-.}"
parent_dir="$(dirname "$project_dir")"

for dir in "$project_dir" "$parent_dir"; do
  if [[ -d "$dir" ]]; then
    dir_full="$(cd "$dir" && pwd)"
    if [[ "$dir_full" == "$script_dir" || "$dir_full" == "$script_dir/"* ]]; then
      echo "The directory '$script_dir' is for project skeletons only." >&2
      echo "Can't create a new project here." >&2
      echo >&2
      echo "Please give a path to the new project:" >&2
      echo >&2
      echo "    $0 $1 /path/to/your/project" >&2
      echo >&2
      echo "Or run this command from some other directory:" >&2
      echo >&2
      echo "    cd /where/you/want/it" >&2
      echo "    '$script_dir/$(basename "$0")' $1 yourprojectname" >&2
      echo >&2
      exit 1
    fi
  fi
done

if [[ ! -d "$parent_dir" ]]; then
  echo "Can't create a new project in '$project_dir' because the directory '$parent_dir' does not exist." >&2
  exit 1
fi

if in_list "$project_skeletons" "$project_dir"; then
  read -p "Are you sure you want to create a project from project skeleton '$project_skeleton' in the directory '$project_dir'? [yN] " -n 1 -r >&2
  echo >&2
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

if [[ -d "$project_dir" && -n "$(ls -A "$project_dir")" ]]; then
  read -p "The directory '$(cd "$project_dir" && pwd)' is not empty! Are you sure you want to create a new pipeline project there? [yN] " -n 1 -r >&2
  echo >&2
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
else
  mkdir -p "$project_dir"
fi

project_name="${3:-$(basename "$(cd "$project_dir" && pwd)" | sed -e 's/[ _]/-/g')}"

if echo "$project_name" | LANG=C grep '[^[:alnum:]-]' >/dev/null; then
  echo "'$project_name' is not a valid project name!" >&2
  echo >&2
  echo 'The project name may only contain the following characters:' >&2
  echo >&2
  echo '  - Letters: a-z and A-Z' >&2
  echo >&2
  echo '  - Numbers: 0-9' >&2
  echo >&2
  echo '  - Hyphens: -' >&2
  echo >&2
  exit 1
fi

source "$script_dir/.project-util.sh"
copy_project_directory "$script_dir/core" "$project_dir"
copy_project_directory "$script_dir/core/.magritte" "$project_dir/.magritte"
copy_project_directory "$script_dir/$project_skeleton" "$project_dir"
cp "$script_dir/$project_skeleton/.gitignore" "$project_dir"
cp "$script_dir/.gitattributes" "$project_dir"

echo "Project $project_name created successfully!"
echo
echo 'Next steps:'
echo
echo ' 1. Change to the project directory:'
echo
echo "        cd '$project_dir'"
echo
echo ' 2. Start the Docker containers:'
echo
echo '        docker/start'
echo
echo " 3. Configure the containers in all environments:"
echo
echo '        imagination/provision'
echo
echo " 4. See where you can access your services:"
echo
echo '        docker/port'
echo
