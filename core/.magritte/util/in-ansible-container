#!/bin/bash
set -eu
cd "$(dirname $BASH_SOURCE)"

source ssh.sh

require_ssh_keys || exit $?

../../docker/PROJECT-ansible/start.sh

# Synchronize SSH config. We can't use a Docker volume mount because then we
# couldn't control ownership and permissions and SSH checks them.
if [[ -f ~/.ssh/config ]]; then
  docker cp -L ~/.ssh/config PROJECT-ansible:/home/ansible/.ssh/config
  docker exec PROJECT-ansible bash -c 'chown -R ansible:ansible /home/ansible/.ssh && chmod 700 /home/ansible/.ssh && chmod 600 /home/ansible/.ssh/config'
else
  docker exec PROJECT-ansible rm /home/ansible/.ssh/config
fi

# By default, Ansible leaves master connections open for 60s of idle time.
# Sometimes these master connections keep the connection to our ssh-agent open,
# which prevents our SSH connection (running ansible or ansible-playbook) from
# being closed. This results in up to 60s of idle waiting at the end of an
# Ansible command before the control returns back to the local shell.
#
# To work around this, at the end of our command we walk the list of Ansible's
# SSH control sockets (/home/ansible/.ansible/cp/*) and close all the
# connections associated with them.

docker_host="$(../../docker/host)"
ansible_ssh_port="$(../../docker/port PROJECT-ansible 22 | cut -d : -f 2)"
ssh \
  -o UserKnownHostsFile=/dev/null \
  -o StrictHostKeyChecking=no \
  -o LogLevel=ERROR \
  -t \
  -A \
  "ansible@$docker_host" \
  -p "$ansible_ssh_port" \
  "cd /pipeline && $@; status=\$?; for cs in /home/ansible/.ansible/cp/*; do ssh -O exit -S \$cs . 2>/dev/null; done; exit \$status"
